namespace cuMat {

/** \page TutorialCWise Component-wise expressions

Component-wise expressions operate on the individual entries of a matrix.
They are simple in structure and can be chained arbitrary and compile to only a single kernel invocation.
For example, assume \f$ a, b, c, d, e, f \f$ are all matrices of the same size, then \f$ f = a + 2*b - sin(c) + pow(d, e) \f$ is evaluated in a single loop over all entries in a single kernel.

\section TutorialCWise_Nullary Nullary operations

Nullary operations are leaves in the evaluation tree, they don't take any matrix as input.

All predefined nullary operations are available as static functions in the Matrix class. This allows to inherit the data type, storage order and the information about compile-time sizes.
The following two operations are available:

Constant matrix:
\code{.cpp}
BMatrixXf m = BMatrixXf::Constant(3, 4, 2, 0.5f);
//create a 3x4 matrix with two batches filled completely with 0.5
\endcode

Identity matrix:
\code{.cpp}
BMatrixXf m = BMatrixXf::Identity(3, 4, 2);
//create a 3x4 matrix with two batches that contains ones along the main diagonal and zeros everywhere else
\endcode

Overloaded versions of these functions are available in the case that sizes (e.g. the number of batches) are known on compile-time.
See the documentation of the Matrix class for a list of those.

\section TutorialCWise_Unary Unary operations

Component-wise unary expression take a matrix as input, perform some transformation on each entry and return the modified matrix of the same size as the input.

For convenience, most of these operations are available both as a method (<tt>matrix.cwiseSin()</tt>) or as a function (<tt>sin(matrix)</tt>).
The functions are defined by default in the global namespace, but this can be changed by specifying the macros \c CUMAT_FUNCTION_NAMESPACE_BEGIN and \c CUMAT_FUNCTION_NAMESPACE_END.

Supported types: i: integer types (int, long, ...); f: floating point types (float, double), c: complex types (complex float, complex double).

<table>
<caption id="unary_ops">Unary operations</caption>
<tr><th>Function on element \f$ x \f$ </th>  <th>Method style on matrix \c m </th>  <th>Function style on matrix \c m </th> <th>Supported types</th> </tr>

<tr><td> \f$ -x \f$ </td>  <td> \c m.negate() </td>  <td> \c -m </td> <td>i, f, c</td> </tr>
<tr><td>\f$ 1/x \f$</td>  <td>\c m.cwiseInverse() </td>  <td> \c inverse(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \lceil x \rceil \f$</td>  <td>\c m.cwiseCeil() </td>  <td> \c ceil(m) </td> <td>i, f</td></tr>
<tr><td>\f$ \lfloor x \rfloor \f$</td>  <td>\c m.cwiseFloor() </td>  <td> \c floor(m) </td> <td>i, f</td></tr>
<tr><td>\f$ \lfloor x \rceil \f$</td>  <td>\c m.cwiseRound() </td>  <td> \c round(m) </td> <td>i, f</td></tr>

<tr><td>\f$ e^x \f$</td>  <td>\c m.cwiseExp() </td>  <td> \c exp(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \log(x) \f$</td>  <td>\c m.cwiseLog() </td>  <td> \c log(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \log(x+1) \f$</td>  <td>\c m.cwiseLog1p </td>  <td> \c log1p(m) </td> <td>f</td></tr>
<tr><td>\f$ \log_10(x) \f$</td>  <td>\c m.cwiseLog10 </td>  <td> \c log10(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \sqrt{x} \f$</td>  <td>\c m.cwiseSqrt() </td>  <td> \c sqrt(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \frac{1}{\sqrt{x}} \f$</td>  <td>\c m.cwiseRsqrt() </td>  <td> \c rsqrt(m) </td> <td>f</td></tr>
<tr><td>\f$ \sqrt[3]{x} \f$</td>  <td>\c m.cwiseCbrt() </td>  <td> \c cbrt(m) </td> <td>f</td></tr>
<tr><td>\f$ \frac{1}{\sqrt[3]{x}} \f$</td>  <td>\c m.cwiseRcbrt() </td>  <td> \c rcbrt(m) </td> <td>f</td></tr>

<tr><td>\f$ \sin(x) \f$</td>  <td>\c m.cwiseSin() </td>  <td> \c sin(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \cos(x) \f$</td>  <td>\c m.cwiseCos() </td>  <td> \c cos(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \tan(x) \f$</td>  <td>\c m.cwiseTan() </td>  <td> \c tan(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \sin^{-1}(x) \f$</td>  <td>\c m.cwiseAsin() </td>  <td> \c asin(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \cos^{-1}(x) \f$</td>  <td>\c m.cwiseAcos() </td>  <td> \c acos(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \tan^{-1}(x) \f$</td>  <td>\c m.cwiseAtan() </td>  <td> \c atan(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \sinh(x) \f$</td>  <td>\c m.cwiseSinh </td>  <td> \c sinh(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \cosh(x) \f$</td>  <td>\c m.cwiseCosh </td>  <td> \c cosh(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \tanh(x) \f$</td>  <td>\c m.cwiseTanh </td>  <td> \c tanh(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \sinh^{-1}(x) \f$</td>  <td>\c m.cwiseAsinh </td>  <td> \c asinh(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \cosh^{-1}(x) \f$</td>  <td>\c m.cwiseAcosh </td>  <td> \c acosh(m) </td> <td>f, c</td></tr>
<tr><td>\f$ \tanh^{-1}(x) \f$</td>  <td>\c m.cwiseAtanh </td>  <td> \c atanh(m) </td> <td>f, c</td></tr>
<tr><td>Error function \f$ \text{erf}(x) \f$</td>  <td>\c m.cwiseErf() </td>  <td> \c erf(m) </td> <td>f</td></tr>
<tr><td>Complementary error function \f$ \text{cerf}(x) \f$</td>  <td>\c m.cwiseCerf() </td>  <td> \c cerf(m) </td> <td>f</td></tr>
<tr><td>Log-gamma function \f$ \ln \Gamma(x) \f$</td>  <td>\c m.cwiseLgamma() </td>  <td> \c lgamma(m) </td> <td>f</td></tr>

<tr><td>Binary NOT <code>~x</code></td>  <td>\c m.cwiseBinaryNot() </td>  <td> \c - </td> <td>i</td></tr>
<tr><td>Logical NOT <code>!x</code></td>  <td>\c m.cwiseLogicalNot() </td>  <td> \c - </td> <td>bool</td></tr>

</table>

\section TutorialCWise_Binary Binary operations

Component-wise binary expression take two matrices as input, perform some transformation on each entry and return the modified matrix of the same size as the input.
This means, given the two entries \f$ x \f$ and \f$ y \f$, the operation computes \f$ f(x,y) \f$ for each entry.
For now, assume that both input matrices have the same size.

cuMat also supports broadcasting, e.g. combine a vector and a matrix by a binary expression. This is covered in the next chapter \ref TutorialCWise_Broadcasting.

<table>
<caption id="binary_ops">Unary operations</caption>
<tr><th>Function on element \f$ x,x \f$ </th>  <th>Method style on matrix \c m1 and \c m2 </th>  <th>Function style on matrix \c m1 and \c m2 </th>  <th>Supported types</th></tr>

<tr><td> \f$ x + y \f$ </td>  <td> not available </td>  <td> \c m1+m2 </td> <td>f, i, c</td></tr>
<tr><td> \f$ x - y \f$ </td>  <td> not available </td>  <td> \c m1-m2 </td> <td>f, i, c</td></tr>
<tr><td> \f$ x * y \f$ </td>  <td> \c m1.cwiseMul(m2) </td>  <td> not available </td> <td>f, i, c</td></tr>
<tr><td> \f$ x / y \f$ </td>  <td> \c m1.cwiseDiv(m2) </td>  <td> not available </td> <td>f, i, c</td></tr>
<tr><td> \f$ x \% y \f$ </td>  <td> \c m1.cwiseMod(m2) </td>  <td> \c m1 \% \c m2 </td> <td>i</td></tr>
<tr><td> \f$ x^y \f$ </td>  <td> \c m1.cwisePow(m2) </td>  <td> \c pow(m1,m2) </td> <td>f, c</td></tr>

<tr><td> Binary AND <code>x & y</code> </td>  <td> \c m1.cwiseBinaryAnd(m2) </td>  <td> \c - </td> <td>i</td></tr>
<tr><td> Binary OR <code>x | y</code> </td>  <td> \c m1.cwiseBinaryOr(m2) </td>  <td> \c - </td> <td>i</td></tr>
<tr><td> Binary XOR <code>x ^ y</code> </td>  <td> \c m1.cwiseBinaryXor(m2) </td>  <td> \c - </td> <td>i</td></tr>
<tr><td> Logical AND <code>x && y</code> </td>  <td> \c m1.cwiseLogicalAnd(m2) </td>  <td> \c - </td> <td>bool</td></tr>
<tr><td> Logical OR <code>x || y</code> </td>  <td> \c m1.cwiseLogicalOr(m2) </td>  <td> \c - </td> <td>bool</td></tr>
<tr><td> Logical XOR <code>x ^ y</code> </td>  <td> \c m1.cwiseLogicalXor(m2) </td>  <td> \c - </td> <td>bool</td></tr>

</table>

Note that there is no overloaded operator for component wise multiplication and division. This is because the multiplication operator is already used for matrix-matrix multiplication.

\section TutorialCWise_Broadcasting Broadcasting

The concept behind broadcasting is that a tensor of lower rank is interpreted as a tensor of higher rank by duplicating the entries along the missing dimension.

A simple example is to add a column vector to each column in a matrix. This example is translated from the Eigen documentation and looks in cuMat as follows:

Example:
\include TutorialCWise_broadcasting.cu

Output:
\include TutorialCWise_broadcasting.out

All broadcasting operations expand the dimensions (row, column or batch) of one argument to match the dimension of the other argument if the dimension if 1 at <b>compile time</b>.

The extreme case is to expand a scalar (rank zero tensor) to a batched matrix (rank three tensor):
\code{.cpp}
BMatrixXi matrix(3, 5, 6); //dynamic 3x5 matrix with 6 batches
Scalari scalar; //a single scalar in GPU memory, in other words, a statically sized 1x1 matrix
BMatrixXi result = scalar + matrix; //adds the value of the scalar to every entry in the matrix
\endcode

The expansion from a scalar value has the special case that the scalar can also be provided from host memory.
Further, the type of the scalar is automatically converted to the type of the matrix if the conversion can be done implicitly.
\code{.cpp}
BMatrixXd matrix(3, 5, 6); //dynamic 3x5 matrix with 6 batches of doubles
float scalar = 5;
BMatrixXi result = scalar + matrix; //float can be implicitly cast to double
\endcode

Further, overloads for multiplication and division are available for host scalars. In that case, there is no ambiguity with matrix-matrix multiplication
\code{.cpp}
BMatrixXd matrix(3, 5, 6);
float scalar = 5;
BMatrixXi result = scalar * matrix; //multiplies every element of the matrix with the scalar
\endcode

\section TutorialCWise_Comparison Comparison operations

cuMat also provides overloads of the comparison operators <, >, <=, >=, == and !=.
They act exactly like regular component-wise binary operations (including support for broadcasting), except that they return a boolean matrix.
Example:
\code{.cpp}
MatrixXi m1(4, 5);
MatrixXi m2(4, 5);
//fill matrices
MatrixXb result = m1 == m2;
//The entries of this matrix are true iff the respective entry in m1 and m2 are equal
\endcode

If, for example, you want to test if a matrix only contains positive numbers, you have to use a reduction afterwards:
\code{.cpp}
MatrixXi m(4, 5);
//fill the matrix
bool is_all_positive = all(m > 0);
\endcode

\section TutorialCWise_Casting Type Casting

cuMat does not perform implicit type conversion at binary operations. If you try to combine two matrices of different types e.g. by an addition, an error is thrown on compile-time.
A manual casting is performed in the following way:
\code{.cpp}
MatrixXi m1(3, 3); //matrix of integers
MatrixXf m2 = m1.cast<float>(); //casting to float
\endcode
Casting is also a component-wise operation, so it can be inserted in a chain of other component-wise expressions without overhead.

\section TutorialCWise_Diagonal Diagonal matrices

The main diagonal of a (not necessarily square) matrix is extracted by \link MatrixBase::diagonal() diagonal()\endlink.
The result is a column vector containing the entries of the main diagonal. Note that if this is called on a component-wise expression, then only the entries on the diagonal are evaluated at all.

The convert a vector into a matrix with the vector's entries on the diagonal, the operation \link MatrixBase::asDiagonal() asDiagonal()\endlink can be used.

\section TutorialCWise_RealImag Real and Imaginary part of a matrix

For a complex matrix, the methods \link MatrixBase::real() real()\endlink and \link MatrixBase::imag() imag()\endlink can be used to extract the real or imaginary part of the matrix.
These methods also exist in the function-style version: <tt>real(MatrixBase)</tt> and <tt>imag(MatrixBase)</tt>.
Example:
\code{.cpp}
typedef Matrix<cdouble, Dynamic, Dynamic, 1, RowMajor> CMatrix;
typedef Matrix<double, Dynamic, Dynamic, 1, RowMajor> RMatrix;
CMatrix mat = ...;
RMatrix realPart = mat.real(); // or real(mat);
RMatrix imagPart = mat.imag(); // or imag(mat);
\endcode

\note These methods are only available for complex matrices. A compiler error is thrown if they are applied to real matrices.

The methods <tt>real()</tt> and <tt>imag()</tt> can also be used as lvalues on a Matrix. By that, you can set the real and imaginary part of a matrix separately.
Example:
\code{.cpp}
CMatrix mat(rows, cols);
mat.real() = 5*RMatrix::Identity(rows, cols);
mat.imag() = someOtherExpressionYieldingARealMatrix;
\endcode

*/

}