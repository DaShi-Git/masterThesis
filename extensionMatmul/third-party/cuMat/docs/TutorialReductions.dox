namespace cuMat {

/** \page TutorialReductions Reductions

This page explains the available reduction operations, how they are used and how to build upon them.

\section TutorialReductions_Reductions Reductions

In cuMat, a reduction is a function that is used to combine the values of a matrix along one or more axes into a single scalar value.
This means, the reduction can be performed along the rows, the columns, the batches, or any combination of those.

All reduction operations are available in two versions, depending on when the information on which axes shall be reduced is available.
 - Statically switched: the axes are passed as template argument.
   The resulting matrix will have a compile-time size of one at the reduced axis.
   Example: <tt>mat.sum<ReductionAxis::Row | ReductionAxis::Batch>()</tt>
 - Dynamically switched: the axes are passed as function parameter during runtime.
   The resulting matrix will have dynamic size.
   Example: <tt>mat.sum(ReductionAxis::Row | ReductionAxis::Batch)</tt>
   
The symbolic values for the axes are defined in the enum \ref ReductionAxis.
If no axis is specified, a (statically switched) reduction along all axes are performed, <tt>mat.sum()</tt> returns a single scalar.

The following primitive reduction operations are available:
<table>
<tr><th>Operation</th> <th>Metdod name</th> <th>Supported types</th></tr>
<tr><td>Sum of tde elements</td> <td>\link MatrixBase::sum() sum()\endlink <td>Integer and float types</td></tr>
<tr><td>Product of tde elements</td> <td>\link MatrixBase::prod() prod()\endlink <td>Integer and float types</td></tr>
<tr><td>Minimum</td> <td>\link MatrixBase::minCoeff() minCoeff()\endlink <td>Integer and float types</td></tr>
<tr><td>Maximum</td> <td>\link MatrixBase::maxCoeff() maxCoeff()\endlink <td>Integer and float types</td></tr>
<tr><td>Logical 'AND'</td> <td>\link MatrixBase::all() all()\endlink <td>Bool</td></tr>
<tr><td>Logical 'OR'</td> <td>\link MatrixBase::any() any()\endlink <td>Bool</td></tr>
<tr><td>Bitwise 'AND'</td> <td>\link MatrixBase::bitwiseAnd() bitwiseAnd()\endlink <td>Integer types</td></tr>
<tr><td>Bitwise 'OR'</td> <td>\link MatrixBase::bitwiseOr() bitwiseOr()\endlink <td>Integer types</td></tr>
</table>

The following examples demonstrates a few of the basic reduction operations:
<table class="example">
<tr><th>Example:</th><th>Output:</th></tr>
<tr><td>
\include TutorialReductions_basic.cu
</td>
<td>
\verbinclude TutorialReductions_basic.out
</td></tr></table>

The second example demonstrates the partial reductions:
<table class="example">
<tr><th>Example:</th><th>Output:</th></tr>
<tr><td>
\include TutorialReductions_partial.cu
</td>
<td>
\verbinclude TutorialReductions_partial.out
</td></tr></table>

\section TutorialReductions_Derived Derived Reductions

The following operations are combinations of already presented primitive reductions and component-wise operations.

The trace of a matrix is available with \link MatrixBase::trace() trace()\endlink. It is simply implemented as <tt>diagonal().sum<ReductionAxis::Row>()</tt>.

The dot product of two vectors is available with \link MatrixBase::dot() dot(other)\endlink. Note that both vectors must both be either compile-time row vectors or compile-time column vectors.

The l2-norm of a vector can be computed with \link MatrixBase::norm() norm()\endlink, the squared version with \link MatrixBase::squaredNorm() squaredNorm()\endlink. 
This method can also be applied on matrices; in that case, a n-by-p matrix is seen as a vector of size (n*p), so for example the norm() method returns the "Frobenius" or "Hilbert-Schmidt" norm.

*/

}