import sys
import os
import os.path
import json
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np
from matplotlib.patches import Ellipse

"""
Arguments:
 path to the ground truth file as generated by 'GenerateData.py'
"""

if __name__== "__main__":

    # parse results
    resultFile = sys.argv[1]
    print('Read results from', resultFile)
    with open(resultFile, 'r') as f:
        results = json.load(f)
    print(results)

    # find setting that changes
    changeDimension = results[0]["Settings"][0] != results[1]["Settings"][0]
    changeComponents = results[0]["Settings"][1] != results[1]["Settings"][1]
    changeNumPoints = results[0]["Settings"][3] != results[1]["Settings"][3]
    runs = len(results)

    # title and labels
    xscale = 'linear'
    yscale = 'linear'
    if changeDimension:
        title = "GMM: Scale Dimension\n# components: %d, # points: %d, # iterations: %d"%(results[0]["Settings"][1], results[0]["Settings"][3], results[0]["Settings"][4])
        xlabel = "Dimension"
        xdata = [results[run]["Settings"][0] for run in range(runs)]
    elif changeComponents:
        title = "GMM: Scale Components\n# dimension: %d, # points: %d, # iterations: %d"%(results[0]["Settings"][0], results[0]["Settings"][3], results[0]["Settings"][4])
        xlabel = "Components"
        xdata = [results[run]["Settings"][1] for run in range(runs)]
    elif changeNumPoints:
        title = "GMM: Scale Number of Points\n# dimension: %d, # components: %d, # iterations: %d"%(results[0]["Settings"][0], results[0]["Settings"][1], results[0]["Settings"][4])
        xlabel = "Number of Points"
        xdata = [results[run]["Settings"][3] for run in range(runs)]
        xscale = 'log'
        yscale = 'log'
    else:
        raise NotImplementedError()
    ylabel = "Time (ms)"

    # now create the plot
    ydataCuMat = [results[run]["CuMat"] for run in range(runs)]
    ydataEigen = [results[run]["Eigen"] for run in range(runs)]
    plt.plot(xdata, ydataCuMat, '-o', label='cuMat')
    plt.plot(xdata, ydataEigen, '-o', label='Eigen')
    for i,j in zip([xdata[0], xdata[-1]],[ydataCuMat[0], ydataCuMat[-1]]):
        plt.annotate(str(j),xy=(i,j), xytext=(-10,5), textcoords='offset points')
    for i,j in zip([xdata[0], xdata[-1]],[ydataEigen[0], ydataEigen[-1]]):
        plt.annotate(str(j),xy=(i,j), xytext=(-10,5), textcoords='offset points')
    plt.xscale(xscale)
    plt.yscale(yscale)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(title)
    plt.legend()
    plt.xticks(xdata)

    #plt.show()
    plt.savefig(os.path.splitext(resultFile)[0]+'.png', bbox_inches='tight', dpi=300)
